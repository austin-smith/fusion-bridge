import { TypedDeviceInfo, IntermediateState, DisplayState } from '@/lib/mappings/definitions';

/**
 * High-level categories for standardized events RECEIVED FROM EXTERNAL SYSTEMS.
 */
export enum EventCategory {
  DEVICE_STATE = 'DEVICE_STATE',     // Changes in the primary operational state (on/off, lock/unlock, open/close, sensor alert/normal)
  DEVICE_STATUS = 'DEVICE_STATUS',    // Changes in the device's or system component's health/status (online/offline, tampered, UNKNOWN), as reported by the external system.
  ANALYTICS = 'ANALYTICS',          // Events generated by analysis (person detected, line crossed, camera motion)
  UNKNOWN = 'UNKNOWN',              // Events received from external systems that could not be specifically categorized or parsed.
}

/**
 * Specific types of events RECEIVED FROM EXTERNAL SYSTEMS, grouped semantically.
 */
export type EventType =
  // DEVICE_STATE
  | 'STATE_CHANGED' // Generic state change, payload indicates specifics (e.g., sensor motion)

  // DEVICE_STATUS (Reported by External System)
  | 'ONLINE'
  | 'OFFLINE'
  | 'UNAUTHORIZED' // Renamed from UNAUTHORIZED_ACCESS for brevity potentially
  | 'UNKNOWN_EXTERNAL_EVENT' // Catch-all for unparsed/unhandled events

  // ANALYTICS (Examples, expand as needed)
  | 'PERSON_DETECTED'
  | 'VEHICLE_DETECTED'
  | 'MOTION_DETECTED' // Derived from video analysis (distinct from sensor STATE_CHANGED)
  | 'LINE_CROSSED';


// --- Standardized Event Payloads ---

// Payload for typical state changes (Locks, Switches, Sensors)
export interface StateChangedPayload {
  newState: IntermediateState;
  previousState?: IntermediateState;
  displayState: DisplayState; // Derived for convenience, could be generated later
  rawStateValue?: string | number | boolean;
}

// Payload for device/component status changes reported by the external system
export interface DeviceStatusPayload {
  statusType: 'ONLINE' | 'OFFLINE' | 'UNAUTHORIZED'; // Specific known status types
  message?: string;
  rawStatusValue?: string | number | boolean;
}

// --- NEW Payload for Unknown Events ---
export interface UnknownEventPayload {
  originalEventType?: string; // e.g., "Device.Report" from YoLink, or the main 'event' field
  message: string; // e.g., "Unknown YoLink event structure"
  rawEventPayload: Record<string, any>; // The original raw event
}

// Example payload for analytics events (including camera motion)
export interface AnalyticsPayload {
  detectionType: EventType; // e.g., 'PERSON_DETECTED', 'MOTION_DETECTED'
  confidence?: number;
  boundingBox?: [number, number, number, number];
  imageUrl?: string;
  zone?: string;
  rawAnalyticValue?: Record<string, any>;
}

// Union type for all possible standardized payloads from external systems
// Uses conditional types based on EventType
export type StandardizedEventPayload<T extends EventType = EventType> =
  T extends 'STATE_CHANGED' ? StateChangedPayload :
  T extends 'ONLINE' | 'OFFLINE' | 'UNAUTHORIZED' ? DeviceStatusPayload :
  T extends 'PERSON_DETECTED' | 'VEHICLE_DETECTED' | 'MOTION_DETECTED' | 'LINE_CROSSED' ? AnalyticsPayload :
  T extends 'UNKNOWN_EXTERNAL_EVENT' ? UnknownEventPayload : // Added condition for Unknown
  Record<string, any>; // Fallback


/**
 * The core standardized event structure used throughout the system for EXTERNAL events.
 */
export interface StandardizedEvent<T extends EventType = EventType> {
  eventId: string; // Unique identifier for this processed event instance
  timestamp: Date; // Original event timestamp
  connectorId: string; // ID of the connector instance
  deviceId: string; // The connector-specific ID of the device/component associated with the event
  deviceInfo: TypedDeviceInfo; // Standardized device type information
  eventCategory: EventCategory;
  eventType: T;
  payload: StandardizedEventPayload<T>;
  rawEventPayload?: Record<string, any>; // Original, unparsed event payload (optional here as it's required in UnknownEventPayload)
} 